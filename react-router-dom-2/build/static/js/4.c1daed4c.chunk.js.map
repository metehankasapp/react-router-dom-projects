{"version":3,"sources":["components/quotes/NoQuotesFound.js","components/quotes/NoQuotesFound.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/quotes/HighlightedQuote.module.css","components/comments/NewCommentForm.js","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["NoQuotesFound","className","classes","noquotes","module","exports","NewCommentForm","props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","quoteId","form","onSubmit","LoadingSpinner","control","htmlFor","id","rows","ref","actions","CommentItem","item","CommentsList","comments","map","comment","Comments","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","HighlightedQuote","quote","author","QuoteDetail","location","useLocation","console","log","getSingleQuote","loadedQuote","path","exact","element","to"],"mappings":"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","file":"static/js/4.c1daed4c.chunk.js","sourcesContent":["import classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <a className='btn'>\n        Add a Quote\n      </a>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"noquotes\":\"NoQuotesFound_noquotes__3DIYb\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__iZX-v\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__2Te8b\",\"loading\":\"NewCommentForm_loading__2veC2\",\"control\":\"NewCommentForm_control__3NVeP\",\"actions\":\"NewCommentForm_actions__2fwWP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__24mbD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__valp0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__nE9T6\"};","import { useRef, useEffect } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\n\nimport classes from \"./NewCommentForm.module.css\";\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [error, status, onAddedComment]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n    // optional: Could validate here\n\n    // send comment to server\n    sendRequest({ commentData: { text: enteredText }, quoteId: props.quoteId });\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === \"pending\" && (\n        <div className=\"centered\">\n          <LoadingSpinner />\n        </div>\n      )}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router-dom\";\nimport useHttp from \"../../hooks/use-http\";\n\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport CommentsList from \"./CommentsList\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments);\n\n  useEffect(() => {\n    sendRequest(params.quoteId);\n  }, [params.quoteId, sendRequest]);\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(params.quoteId);\n  }, [sendRequest, params.quoteId]);\n\n  let comments;\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (status === \"completed\" && loadedComments) {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <div>no comment were added yet</div>;\n  }\n\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={params.quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\nimport { Routes, useParams, Route, Link, useLocation } from \"react-router-dom\";\n\nimport Comments from \"../components/comments/Comments\";\nimport HighlatedQuote from \"../components/quotes/HighlightedQuote\";\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\nimport NoQuotesFound from \"../components/quotes/NoQuotesFound\";\n\nimport useHttp from \"../hooks/use-http\";\nimport { getSingleQuote } from \"../lib/api\";\n\nconst QuoteDetail = () => {\n  const location = useLocation();\n\n  const params = useParams();\n  console.log(location);\n\n  const { quoteId } = params;\n\n  const {\n    sendRequest,\n    status,\n    data: loadedQuote,\n    error,\n  } = useHttp(getSingleQuote, true);\n\n  useEffect(() => {\n    sendRequest(quoteId);\n  }, [sendRequest, quoteId]);\n\n  if (status === \"pending\") {\n    return (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (error) {\n    return <div className=\"centered focused\">{error}</div>;\n  }\n\n  if (status === \"completed\" && (!loadedQuote || loadedQuote.length === 0)) {\n    return <NoQuotesFound />;\n  }\n\n  if (!loadedQuote) {\n    return <p>No quote found !</p>;\n  }\n  return (\n    <>\n      <HighlatedQuote text={loadedQuote.text} author={loadedQuote.author} />\n      <Routes>\n        <Route\n          path={`*`}\n          exact\n          element={\n            <div className=\"centered\">\n              <Link className=\"btn--flat\" to={`comments`}>\n                {\" \"}\n                Load Comments\n              </Link>\n            </div>\n          }\n        />\n        <Route path={`comments`} element={<Comments />} />\n      </Routes>\n    </>\n  );\n};\n\nexport default QuoteDetail;\n"],"sourceRoot":""}